apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'com.google.protobuf'
apply plugin: 'com.didi.dokit'

android {
    compileSdkVersion 29

    defaultConfig {
        applicationId rootProject.applicationId
        minSdkVersion 21
        targetSdkVersion 29
        versionCode rootProject.versionCode as int
        versionName rootProject.versionName
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation":
                                      "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        debug {
            versionNameSuffix ".debug"
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    lintOptions {
        abortOnError false
    }

    android.applicationVariants.all { variant ->
        def buildTime = new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08:00"))
        def flavor = variant.productFlavors.collect { it.name }.join('-')

        variant.outputs.all { output ->
            outputFileName = [
                    rootProject.applicationName,
                    "v${variant.versionName}",
                    "versionCode${variant.versionCode}",
                    buildTime,
                    flavor.length() > 0 ? "[${flavor}]" : "",
                    variant.buildType.name
            ].findAll { it.length() > 0 }.join('_') << ".apk"
        }
    }

}

//配置Protobuf
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.10.0"
    }

    // Generates the java Protobuf-lite code for the Protobufs in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}

dokitExt {
    //通用设置
    comm {
        //地图经纬度开关
        gpsSwitch true
        //网络开关
        networkSwitch true
        //大图开关
        bigImgSwitch true
        //webView js 抓包
        webViewSwitch true
    }

    slowMethod {
        //0:默认模式 打印函数调用栈 需添加指定入口  默认为application onCreate 和attachBaseContext
        //1:普通模式 运行时打印某个函数的耗时 全局业务代码函数插入
        strategy 0
        //函数功能开关
        methodSwitch true

        //调用栈模式配置
        stackMethod {
            //默认值为 5ms 小于该值的函数在调用栈中不显示
            thresholdTime 10
            //调用栈函数入口
            enterMethods = ["com.didichuxing.doraemondemo.MainDebugActivity.test1"]
            //黑名单 粒度最小到类 暂不支持到方法
            methodBlacklist = ["com.facebook.drawee.backends.pipeline.Fresco"]
        }
        //普通模式配置
        normalMethod {
            //默认值为 500ms 小于该值的函数在运行时不会在控制台中被打印
            thresholdTime 500
            //需要针对函数插装的包名
            packageNames = ["com.didichuxing.doraemondemo"]
            //不需要针对函数插装的包名&类名
            methodBlacklist = ["com.didichuxing.doraemondemo.dokit"]
        }
    }
}

configurations.all {
    resolutionStrategy.force 'com.blankj:utilcode:1.30.5'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    api project(':BaseMVP')
    api project(':BaseNetworkService')
    api project(':BaseLogCollect')
//    implementation 'com.aibb.android.base:BaseMVP:0.1.0'
    implementation 'com.kingja.loadsir:loadsir:1.3.8'
    implementation 'com.afollestad.material-dialogs:core:3.3.0'
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.47'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation 'com.google.android.material:material:1.3.0-alpha04'

    def hilt_version = "2.28-alpha"
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    implementation 'androidx.multidex:multidex:2.0.1'

    def data_store_version = "1.0.0-alpha05"
    implementation "androidx.datastore:datastore:$data_store_version"
    implementation "androidx.datastore:datastore-preferences:$data_store_version"
    implementation "com.google.protobuf:protobuf-javalite:3.14.0"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
    implementation "androidx.fragment:fragment-ktx:1.2.5"

    def room_version = "2.2.5"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"

    def stetho_version = "1.5.0"
    implementation "com.facebook.stetho:stetho:$stetho_version"
    implementation "com.facebook.stetho:stetho-okhttp3:$stetho_version"
    implementation 'com.squareup.leakcanary:leakcanary-android:1.6.1'

    implementation "androidx.startup:startup-runtime:1.0.0"

    def work_version = "2.4.0"
    // (Java only)
    implementation "androidx.work:work-runtime:$work_version"
    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work_version"
    // optional - RxJava2 support
    implementation "androidx.work:work-rxjava2:$work_version"
    // optional - GCMNetworkManager support
    implementation "androidx.work:work-gcm:$work_version"
    // optional - Test helpers
    androidTestImplementation "androidx.work:work-testing:$work_version"

    def what_if_version = "1.0.9"
    implementation "com.github.skydoves:whatif:$what_if_version"
    implementation "com.github.skydoves:whatif-android:$what_if_version"

    // For developers using AndroidX in their applications
    // EasyPermission
    implementation 'pub.devrel:easypermissions:3.0.0'
    // RxPermissions
    implementation 'com.github.tbruyelle:rxpermissions:0.12'
    // Permission Dispatcher
    def permission_dispatcher_version = "4.8.0"
    implementation "org.permissionsdispatcher:permissionsdispatcher:$permission_dispatcher_version"
    kapt "org.permissionsdispatcher:permissionsdispatcher-processor:$permission_dispatcher_version"
    // SoulPermission
    implementation 'com.qw:soulpermission:1.3.0'

    // Tencent X5
    api 'com.tencent.tbs.tbssdk:sdk:43939'
    implementation 'ren.yale.android:cachewebviewlib:2.1.8'

    // Compose, min sdk 21
    implementation 'androidx.ui:ui-tooling:0.1.0-dev02'
    implementation 'androidx.ui:ui-layout:0.1.0-dev02'
    implementation 'androidx.ui:ui-material:0.1.0-dev02'

    // BoostMultiDex
    implementation 'com.bytedance.boost_multidex:boost_multidex:1.0.1'
    // blankj
    implementation 'com.blankj:utilcodex:1.30.5'
    // Didi doraemonkit
    debugImplementation 'com.didichuxing.doraemonkit:dokitx:3.3.5'
    releaseImplementation 'com.didichuxing.doraemonkit:dokitx-no-op:3.3.5'
}
